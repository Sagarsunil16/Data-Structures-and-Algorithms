
Recursion is a process in which a function calls itself as a subroutine. This allows the function to be repeated several times, as it can call itself during its execution. Recursion is often used to solve problems that can be broken down into smaller, similar subproblems.

Syntax:
function recursiveFunction(parameters) {
  Base case: stopping condition
  if (baseCase) {
    return baseCaseValue;
  }

  Recursive case: function calls itself
  return recursiveFunction(modifiedParameters);
}

Key Components->
    Base Case:  
        This is the condition that stops the recursion.
        Without a base case, the function will call itself indefinitely, leading to a stack overflow.
        Example: If calculating the factorial of a number, the base case is when the number is 0 or 1.
    Recursive Case:
        This is where the function calls itself with a modified input.
        The input is typically modified to move closer to the base case.
        Example: For factorial, the recursive case is n * factorial(n â€“ 1).


-> Why Use Recursion?
    Recursion is particularly useful for solving problems that can be divided into smaller, identical problems. Some common use cases include:
        (1)Tree and Graph Traversals: Recursion is ideal for traversing hierarchical data structures like trees and graphs.
        (2)Divide and Conquer Algorithms: Many algorithms, such as Merge Sort and Quick Sort, use recursion to break down problems into smaller subproblems.
        (3)Backtracking: Recursion is often used in backtracking algorithms to explore all possible solutions.

->Application of Recursion
    (1) Mathematical Computations
        Factorial calculation
        Fibonacci sequence
        Greatest Common Divisor (GCD)
    
    (2) Data Structures
        Tree traversal (Preorder, Inorder, Postorder)
        Graph traversal (Depth-First Search)
        Linked list operations (Reversal, Searching)
        
    (3) Sorting Algorithms
        Merge Sort
        Quick Sort